#!/bin/bash
#
# PrestaShop Development Scripts
# To install, symlink this file to a directory that is in your $PATH
# and make sure it's executable
#
# For example:
# chmod u+x /path/to/this/file
# ln -s /path/to/this/file /usr/local/bin/presta
#
# Copyright (c) 2015 David Gasperoni
#

readonly program="Presta Development"
readonly bold=$(tput bold)
readonly normal=$(tput sgr0)
if [[ -f .rsyncrc ]]; then
    RSYNCRC="$PWD/.rsyncrc"
else
    RSYNCRC="$(dirname ~/.prestarc-rsync)/.prestarc-rsync"
fi

about() {
  cat <<EOF
$program 1.0
Copyright (c) 2015 David Gasperoni
EOF
  exit 0
}

usage() {
  cat <<EOF
$program

Convenience scripts to help developing PrestaShop modules
Usage: presta [command]

  Commands:
      ${bold}help${normal}  Display this help and exit. Also ${bold}--help${normal} or ${bold}-h${normal}.

   ${bold}version${normal}  Output version information and exit. Also ${bold}--version${normal} or ${bold}-v${normal}.

     ${bold}stage${normal}  Copy the working directory to the staging environments defined
            in ~/.prestarc file. You can list several paths to different
            local installations of PrestaShop.

     ${bold}build${normal}  Build a zip file from the current directory that
            will be saved as ./dist/latest-{directory name}.zip
            You can then rename it with the prefix "v{version number}-" yourself.
            Alternatively, you can add ${bold}--ver${normal} or ${bold}--add-version${normal} at the end
            to automatically add version number to the filename.

  ${bold}validate${normal}  Validate the current working directory using PrestaShop's own
            validation service. To be able to use PrestaShop Validator you need to
            generate a Validation API key at https://validator.prestashop.com/user
            and add it to ~/.prestarc configuration file.
            This step requires ${bold}json-tidy${normal}, downloadable via ${bold}npm${normal}.
            Add ${bold}--save${normal} or ${bold}--save-report${normal} to save the report of validation to
            the Desktop instead of outputting it to stdout.

EOF
}

check_directory() {
  if [[ -f ~/.prestarc ]]; then
    source ~/.prestarc
  else
    die "First copy .prestarc to your home directory"
  fi

  if [[ ! -f ~/.prestarc-rsync ]]; then
    die "To test you have to copy or symlink ${bold}.prestarc-rsync${normal} to your home directory"
  fi

  local PROJECTNAME="$(basename $(pwd))"
  if [[ ! -f "$PROJECTNAME.php" ]]; then
    die "No .php file with the same as folder.\nAre you sure that you are in the right folder?"
  fi

}

stage() {
  check_directory

  echo $(date)
  echo "Staging locally on ${bold}$(hostname)${normal} for ${bold}$(whoami)${normal}"
  local COUNTER=0
  for PSI in ${PRESTA_INSTALLS[@]}; do
    rsync -a --delete-excluded --exclude-from=$RSYNCRC $(pwd) $PSI/modules/
    COUNTER=$((COUNTER+1))
  done

  if [ $COUNTER = 0 ]; then
    echo "No PrestaShop installations found in .prestarc"
  else
    echo "Staging complete in ${bold}$COUNTER${normal} PrestaShop installations"
  fi
}

build() {
  check_directory

  local FOLDERNAME=$(dirname $(pwd))
  local PROJNAME=$(basename $(pwd))

  local PREFIX='latest'
  if [[ $1 == '-v' ]]; then
    local PREFIX="v$(awk -F"'|\"" '/\$this->version *= */{print $2}' $PROJNAME.php)"
  fi

  rsync -a --exclude-from=$RSYNCRC $(pwd) $TMPDIR
  cd $TMPDIR
  mkdir -p $FOLDERNAME/$PROJNAME/dist/
  zip -rq $FOLDERNAME/$PROJNAME/dist/$PREFIX-$PROJNAME.zip $PROJNAME
  cd $FOLDERNAME/$PROJNAME
  rm -rf $TMPDIR/$PROJNAME
}

validate() {
  check_directory

  local ENDPOINT="https://validator.prestashop.com/api/modules"
  local KEY=$PRESTA_VALIDATOR_KEY

  local FOLDERNAME=$(dirname $(pwd))
  local PROJNAME=$(basename $(pwd))

  rsync -a --exclude-from=$RSYNCRC $(pwd) $TMPDIR
  cd $TMPDIR
  zip -rq $PROJNAME.zip $PROJNAME
  cd $FOLDERNAME/$PROJNAME

  if [[ $1 == '-s' ]]; then
    curl -s -F key=$KEY -F archive=@$TMPDIR$PROJNAME.zip $ENDPOINT | json-tidy > ~/Desktop/$PROJNAME.json
    echo "Report of validation saved to ~/Desktop/$PROJNAME.json"
  else
    curl -s -F key=$KEY -F archive=@$TMPDIR$PROJNAME.zip $ENDPOINT | json-tidy
  fi

  rm -rf $TMPDIR/$PROJNAME
  rm -rf $TMPDIR/$PROJNAME.zip
}

die() {
  echo -e "$program: $1" >&2
  exit ${2:-1}
}

case $1 in
  help|--help|-h)
    usage
    ;;
  version|--version|-v)
    about
    ;;
  stage)
    stage
    ;;
  build)
    if [[ $2 == '--ver' || $2 == '--add-version' ]]; then
      build -v
    else
      build
    fi
    ;;
  validate)
    if [[ $2 == '--save' || $2 == '--save-report' ]]; then
      validate -s
    else
      validate
    fi
    ;;
esac
